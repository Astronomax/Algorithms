#include <iostream>
#include <cstdio>
#include <vector>
#include <set>
#include <queue>
#include <map>
#include <string>
#include <cmath>
#include <functional>
#include <algorithm>
#include <utility>
#include <stack>
#include <unordered_map>
#include <unordered_set>
#include <iterator>
#include <fstream>
#include <iomanip>
#include <time.h>
#include <complex>
//#pragma comment(linker, "/STACK:16777216")

using namespace std;

typedef long double C;
typedef complex<C> P;

#define X real()
#define Y imag()
#define Size(X) (int)X.size()
#define int long long
#define ui unsigned int
#define mp make_pair
#define timer fghge
#define y1 yjyjyju
#define all(X) (X).begin(), (X).end()
#define endl '\n'

struct decart {
	struct tree {
		int x, y, s;
		tree *l, *r;
		tree(int key) {
			x = key; y = rand();
			l = nullptr, r = nullptr;
			s = 1;
		}
	};

	tree *root = nullptr;

	int get_size(tree *v) {
		return ((v == nullptr) ? 0 : v->s);
	}

	void update(tree *v) {
		if (v == nullptr)
			return;
		v->s = get_size(v->l) + get_size(v->r) + 1;
	}

	tree *merge(tree *a, tree *b) {
		if (a == 0 || b == 0)
			return ((a == 0) ? b : a);

		if (a->y > b->y) {
			a->r = merge(a->r, b);
			update(a);
			return a;
		}
		else {
			b->l = merge(b->l, a);
			update(b);
			return b;
		}
	}

	pair<tree *, tree *> split(tree *v, int key) {
		if (v == nullptr)
			return{ nullptr, nullptr };
		if (v->x > key) {
			auto res = split(v->l, key);
			v->l = res.second;
			update(v);
			return{ res.first, v };
		}
		else {
			auto res = split(v->r, key);
			v->r = res.first;
			update(v);
			return{ v, res.second };
		}
	}

	pair<tree *, tree *> split_k(tree *v, int k) {
		if (v == nullptr)
			return{ nullptr, nullptr };

		if (get_size(v->l) >= k) {
			auto res = split_k(v->l, k);
			v->l = res.second;
			update(v);
			return{ res.first, v };
		}
		else {
			auto res = split_k(v->r, k - (get_size(v->l) + 1));
			v->r = res.first;
			update(v);
			return{ v, res.second };
		}
	}

	void insert(int x) {
		tree *add = new tree(x);
		auto res = split(root, x);
		root = merge(merge(res.first, add), res.second);
	}
};

struct node {
	int lb, rb, lazy = -1;
	node *l, *r;
	decart *order;

	node(int lq, int rq) {
		lb = lq; rb = rq;
		order = new decart();

		if (lb + 1 < rb) {
			int t = (lb + rb) / 2;
			l = new node(lb, t);
			r = new node(t, rb);
		}
	}

	void push() {
		if (lazy == -1)
			return;
		order->insert(lazy);

		if (lb + 1 < rb) {
			if (l->lazy != -1) {
				l->order->insert(l->lazy);
				if (l->lb + 1 < l->rb) {
					l->l->lazy = l->lazy;
					l->r->lazy = l->lazy;
				}
			}
			l->lazy = lazy;

			if (r->lazy != -1) {
				r->order->insert(r->lazy);
				if (r->lb + 1 < r->rb) {
					r->l->lazy = r->lazy;
					r->r->lazy = r->lazy;
				}
			}
			r->lazy = lazy;
		}
		lazy = -1;
	}

	void add(int lq, int rq, int x) {
		push();
		if (lq >= rb || rq < lb)
			return;

		if (lq <= lb && rb - 1 <= rq) {
			push();
			lazy = x;
			push();
		}
		else {
			l->add(lq, rq, x);
			r->add(lq, rq, x);

			order->insert(x);
		}
	}

	int ans(int lq, int rq, int x) {
		int res = 0;
		push();

		if (lq >= rb || rq < lb)
			return 0;

		if (lq <= lb && rb - 1 <= rq) {
			auto temp = order->split(order->root, x);
			res = order->get_size(temp.second);
			order->merge(temp.first, temp.second);
		}
		else {
			res += l->ans(lq, rq, x);
			res += r->ans(lq, rq, x);
		}
		return res;
	}
};

signed main() {
	ios_base::sync_with_stdio(0);
	cin.tie(0), cout.tie(0);

	//freopen("input.txt", "r", stdin);
	//freopen("output.txt", "w", stdout);

	int n; cin >> n;
	node *d = new node(0, n);


	for (int i = 0; i < n; i++) {
		int a, b; cin >> a >> b; a--;
		cout << d->ans(0, a, b) << " ";
		d->add(a, n - 1, b);
	}
	return 0;
}
